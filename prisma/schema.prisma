// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  role       Role      @default(waiter)
  is_online  Boolean   @default(false)

  orders     Orders[]
  billings   Billings[]
}

model Customers {
  id          Int        @id @default(autoincrement())
  name        String
  phone       String? 
  created_at  DateTime   @default(now())

  sessions    Sessions[]
}

model Lady {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  price_per_hour Decimal?   @db.Decimal(10, 2)
  status        LadyStatus @default(offline)

  orders        Orders[]
}

model Rooms {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  price_per_hour Decimal?    @db.Decimal(10, 2)
  status        RoomStatus  @default(available)

  sessions      Sessions[]
}

model Sessions {
  id               Int         @id @default(autoincrement())
  customer_id      Int
  room_id          Int
  minutes_duration Int
  start_time       DateTime
  end_time         DateTime?
  status           SessionStatus @default(active)

  customer         Customers    @relation(fields: [customer_id], references: [id])
  room             Rooms        @relation(fields: [room_id], references: [id])
  orders           Orders[]
  billings         Billings[]
}

model MenuItems {
  id              Int        @id @default(autoincrement())
  name            String
  shopping_price  Decimal?   @db.Decimal(10, 2)
  selling_price   Decimal?   @db.Decimal(10, 2)
  category        String
  stock           Int        @default(0)

  orders          Orders[]
}

model Orders {
  id          Int       @id @default(autoincrement())
  session_id  Int
  item_id     Int?
  user_id     Int
  lady_id     Int?
  quantity    Int
  order_time  DateTime  @default(now())

  session     Sessions  @relation(fields: [session_id], references: [id])
  item        MenuItems? @relation(fields: [item_id], references: [id])
  user        Users     @relation(fields: [user_id], references: [id])
  lady        Lady?     @relation(fields: [lady_id], references: [id])
}

model Billings {
  id              Int          @id @default(autoincrement())
  session_id      Int
  user_id         Int
  room_charge     Decimal?     @db.Decimal(10, 2)
  order_charge    Decimal?     @db.Decimal(10, 2)
  discount_amount Decimal      @default(0) @db.Decimal(10, 2)
  tax_amount      Decimal      @default(0) @db.Decimal(10, 2)
  total_amount    Decimal?     @db.Decimal(10, 2)
  final_amount    Decimal?     @db.Decimal(10, 2)
  payment_method  PaymentMethod @default(cash)
  payment_status  PaymentStatus @default(unpaid)
  billing_time    DateTime      @default(now())

  session         Sessions      @relation(fields: [session_id], references: [id])
  user            Users         @relation(fields: [user_id], references: [id])
}

// ENUMS
enum Role {
  admin
  cashier
  waiter
}

enum LadyStatus {
  online
  offline
  used
}

enum RoomStatus {
  available
  active
  offline
  maintenance
}

enum SessionStatus {
  active
  close
}

enum PaymentMethod {
  transfer
  qris
  cash
}

enum PaymentStatus {
  paid
  unpaid
}